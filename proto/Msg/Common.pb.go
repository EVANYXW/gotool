// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.9
// source: Common.proto

package Msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_ErrorCode_Succeed               ErrorCode = 0
	ErrorCode_ErrorCode_KickPlayer            ErrorCode = 1   //踢出维护机台中的玩家
	ErrorCode_ErrorCode_JoinLobbyFailed       ErrorCode = 100 //加入大厅失败
	ErrorCode_ErrorCode_CreateGameFailed      ErrorCode = 101 //创建游戏失败
	ErrorCode_ErrorCode_JoinGameFailed        ErrorCode = 102 //加入游戏失败
	ErrorCode_ErrorCode_LoadRoleFailed        ErrorCode = 103 //加载角色失败
	ErrorCode_ErrorCode_LoginFailed           ErrorCode = 200 // 登录失败
	ErrorCode_ErrorCode_Binded                ErrorCode = 201 //被其他账号绑定
	ErrorCode_ErrorCode_BindCurAcount         ErrorCode = 202 //已经绑定当前FB
	ErrorCode_ErrorCode_ServerConfigNoExist   ErrorCode = 203 // 配置不存在
	ErrorCode_ErrorCode_HadJoinLobby          ErrorCode = 204 //账号已登陆
	ErrorCode_ErrorCode_GameMaintenance       ErrorCode = 205 //游戏维护中
	ErrorCode_ErrorCode_VersionError          ErrorCode = 206 //版本号不匹配
	ErrorCode_ErrorCode_Invaild_Role          ErrorCode = 207 //无效用户
	ErrorCode_ErrorCode_Had_Enter_Game        ErrorCode = 208 //已进入机台
	ErrorCode_ErrorCode_Leave_Error           ErrorCode = 209 //离开机台错误
	ErrorCode_ErrorCode_Invaild_PlayerSession ErrorCode = 210 //无效用户
	ErrorCode_ErrorCode_Empyt_Account         ErrorCode = 211 //账号为空
	//300服务器内部错误
	ErrorCode_ErrorCode_ResourceFailed ErrorCode = 300 //资源更新失败
	//400 游戏中
	ErrorCode_ErrorCode_UseTreasureCardFailed ErrorCode = 400 //使用低保卡失败
	//AD Reward
	ErrorCode_ErrorCode_CollectAdReward_ErrorOrder   ErrorCode = 401 //等级错误
	ErrorCode_ErrorCode_CollectAdReward_NotCompleted ErrorCode = 402 //任务伟完成
	ErrorCode_ErrorCode_CollectAdReward_Collected    ErrorCode = 403 //奖励已领取
	//Level challenge
	ErrorCode_ErrorCode_Mission_ID_Error      ErrorCode = 500 //任务ID错误
	ErrorCode_ErrorCode_Mission_Error         ErrorCode = 501 //任务不存在
	ErrorCode_ErrorCode_Mission_Not_Completed ErrorCode = 502 //任务未完成
	ErrorCode_ErrorCode_Reward_Collected      ErrorCode = 503 //奖励已领取
	//600大厅功能
	ErrorCode_ErrorCode_Daily_TimeFew      ErrorCode = 600 //领取间隔时间不足
	ErrorCode_ErrorCode_Daily_GetReWardFew ErrorCode = 601 //每日领取次数不足
	//700大厅系统
	ErrorCode_ErrorCode_Daily_MissionValueFew ErrorCode = 701
	ErrorCode_ErrorCode_DiamondFew            ErrorCode = 800 //钻石不足
	//900 mission
	ErrorCode_ErrorCode_AlreadyGet ErrorCode = 900 //已经领取
	ErrorCode_ErrorCode_PointFew   ErrorCode = 901 //点数不足
	//7day
	ErrorCode_ErrorCode_AlreadySign ErrorCode = 1000
	ErrorCode_ErrorCode_TimeOverdue ErrorCode = 1001
	//challege
	ErrorCode_ErrorCode_LevelNoEnough ErrorCode = 1100 //等级不够
	//extendmission
	ErrorCode_ErrorCode_AlreadyGetReward ErrorCode = 1200 //已经领取
	ErrorCode_ErrorCode_ConditionNoReach ErrorCode = 1201 //条件未达到
	//订单无效
	ErrorCode_ErrorCode_InvaildAccessToken   ErrorCode = 1298 //无效Token
	ErrorCode_ErrorCode_PurchaseInvaildState ErrorCode = 1299 //无效状态
	ErrorCode_ErrorCode_InvaildOrder         ErrorCode = 1300
	ErrorCode_ErrorCode_AlreadyConsumption   ErrorCode = 1301
	ErrorCode_ErrorCode_AlreadyHandle        ErrorCode = 1302
	//deal
	ErrorCode_ErrorCode_Deal_Overdue ErrorCode = 1400 //有效时间过期
	//链接赠送金币
	ErrorCode_ErrorCode_LinkGive_Invaild_Token       ErrorCode = 1401 //token无效
	ErrorCode_ErrorCode_LinkGive_Overdue             ErrorCode = 1402 //活动过期
	ErrorCode_ErrorCode_LinkGive_Invaild_RewardsType ErrorCode = 1403 //奖励类型错误
	ErrorCode_ErrorCode_LinkGive_times_over          ErrorCode = 1404 //领奖次数用完
	ErrorCode_ErrorCode_LinkGive_Rewarded            ErrorCode = 1405 //已经领奖
	ErrorCode_ErrorCode_LinkGive_Unkonwn_Error       ErrorCode = 1406 //异常
	//GloryChallenge
	ErrorCode_ErrorCode_GC_Invaild_Mission      ErrorCode = 1501 //任务不存在
	ErrorCode_ErrorCode_GC_Mission_Not_Complete ErrorCode = 1502 //任务未完成
	ErrorCode_ErrorCode_GC_Not_Enough_Gem       ErrorCode = 1503 //钻石不足
	ErrorCode_ErrorCode_GC_Data_Unusual         ErrorCode = 1504 //数据异常
	ErrorCode_ErrorCode_GC_Invaild_Level        ErrorCode = 1505 //等级不够
	ErrorCode_ErrorCode_GC_Invaild_Point        ErrorCode = 1506 //点数不够
	ErrorCode_ErrorCode_GC_Invaild_Config       ErrorCode = 1507 //配置错误
	ErrorCode_ErrorCode_GC_Reward_Collected     ErrorCode = 1508 //奖励已领取
	//WinnerPass
	ErrorCode_ErrorCode_WP_Invaild_Activity ErrorCode = 1601 //活动未开启
	ErrorCode_ErrorCode_WP_Not_UnLock       ErrorCode = 1602 //奖励未解锁
	ErrorCode_ErrorCode_WP_Not_Purchase     ErrorCode = 1603 //未开通付费奖励
	ErrorCode_ErrorCode_WP_Have_Got_Prize   ErrorCode = 1604 //已领取
	ErrorCode_ErrorCode_WP_Invaild_Prize    ErrorCode = 1605 //无效奖励
	//pre-register
	ErrorCode_ErrorCode_PR_Have_Got_Reward ErrorCode = 1701 //已领取
	ErrorCode_ErrorCode_PR_Data_Unusual    ErrorCode = 1702 //数据异常
	//mini game
	ErrorCode_ErrorCode_HeartBonus_Not_Exist        ErrorCode = 1801 //道具不存在
	ErrorCode_ErrorCode_HeartBonus_Error_Type       ErrorCode = 1802 //类型不匹配
	ErrorCode_ErrorCode_HeartBonus_Not_Enough_Times ErrorCode = 1803 //次数不足
	ErrorCode_ErrorCode_HeartBonus_Reward_Not_Exist ErrorCode = 1804 //奖品不存在
	//ios recharge error code
	ErrorCode_ErrorCode_IOS_ERROR_JSON              ErrorCode = 21000 //App Store不能读取你提供的JSON对象
	ErrorCode_ErrorCode_IOS_ERROR_RECEIPTDATA       ErrorCode = 21002 //receipt-data域的数据有问题
	ErrorCode_ErrorCode_IOS_NOPASS_RECEIPTDATA      ErrorCode = 21003 //receipt无法通过验证
	ErrorCode_ErrorCode_IOS_NOPASS_SHARED_SECRET    ErrorCode = 21004 //提供的shared secret不匹配你账号中的shared secret
	ErrorCode_ErrorCode_IOS_RECEIPT_SERVER_DISABLED ErrorCode = 21005 //receipt服务器当前不可用
	ErrorCode_ErrorCode_IOS_SUBSCRIBE_EXPIRE        ErrorCode = 21006 //订阅过期
	ErrorCode_ErrorCode_IOS_SANDBOX_ERRORTO_PRODUCE ErrorCode = 21007 //receipt是Sandbox receipt，但却发送至生产系统的验证服务
	ErrorCode_ErrorCode_IOS_PRODUCE_ERRORTO_SANDBOX ErrorCode = 21008 //receipt是Sandbox receipt，但却发送至生产系统的验证服务
	ErrorCode_ErrorCode_IOS_ORDER_HAVE_DEAL         ErrorCode = 21009 //订单已处理
	ErrorCode_ErrorCode_IOS_BUNDLE_ID_ERROR         ErrorCode = 21010 //bundle id 错误
	//BindAppleID
	ErrorCode_ErrorCode_BindAppleID_Null ErrorCode = 1901 // apple_id 为空
	ErrorCode_ErrorCode_AppleID_Had_Bind ErrorCode = 1902 // apple_id 已经绑定
	//Bingo Mini Game
	ErrorCode_ErrorCode_Bingo_Invaild_Activity     ErrorCode = 2001 //获得未开启
	ErrorCode_ErrorCode_Bingo_Not_Enough_Ball      ErrorCode = 2002 //bingo代币不足
	ErrorCode_ErrorCode_Bingo_Data_Error           ErrorCode = 2003 //数据异常
	ErrorCode_ErrorCode_Bingo_Not_Enough_Wild_Ball ErrorCode = 2004 //bingo Wild_Ball不足
	//Dice Fortune Mini Game
	ErrorCode_ErrorCode_Dice_Invaild_Activity ErrorCode = 2101 //获得未开启
	ErrorCode_ErrorCode_Dice_Not_Enough_Ball  ErrorCode = 2102 //Dice代币不足
	ErrorCode_ErrorCode_Dice_Data_Error       ErrorCode = 2103 //数据异常
	ErrorCode_ErrorCode_Dice_Level_Data_Error ErrorCode = 2104 //关卡等级数据错误
	//BankruptcySystem
	ErrorCode_ErrorCode_Not_Enough_Times ErrorCode = 22001 //次数不足
	ErrorCode_ErrorCode_Had_Enough_Gold  ErrorCode = 22002 //金币条件不满足
	//虚宝卡
	ErrorCode_ErrorCode_Virtual_Card_Not_Exist           ErrorCode = 23001 //虚宝卡不存在
	ErrorCode_ErrorCode_Virtual_Card_Expire              ErrorCode = 23002 //虚宝卡已过期
	ErrorCode_ErrorCode_Virtual_Card_Data_Error          ErrorCode = 23003 //虚宝卡数据异常
	ErrorCode_ErrorCode_Virtual_Card_Low_Vip_Level       ErrorCode = 23004 //vip 等级不足
	ErrorCode_ErrorCode_Virtual_Card_Bet_Mode_Error      ErrorCode = 23005 //下注模式错误
	ErrorCode_ErrorCode_Virtual_Card_HighRoll_Mode_Error ErrorCode = 23006 //进入高倍模式条件不足
	//7+30天登入礼 Login Bonus
	ErrorCode_ErrorCode_LoginBonus_GetRewards_Invalid ErrorCode = 23007 //领奖无效
	//DailyCard
	ErrorCode_ErrorCode_DailyCard_GetRewards_Invalid ErrorCode = 23008 //领奖无效
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "ErrorCode_Succeed",
		1:     "ErrorCode_KickPlayer",
		100:   "ErrorCode_JoinLobbyFailed",
		101:   "ErrorCode_CreateGameFailed",
		102:   "ErrorCode_JoinGameFailed",
		103:   "ErrorCode_LoadRoleFailed",
		200:   "ErrorCode_LoginFailed",
		201:   "ErrorCode_Binded",
		202:   "ErrorCode_BindCurAcount",
		203:   "ErrorCode_ServerConfigNoExist",
		204:   "ErrorCode_HadJoinLobby",
		205:   "ErrorCode_GameMaintenance",
		206:   "ErrorCode_VersionError",
		207:   "ErrorCode_Invaild_Role",
		208:   "ErrorCode_Had_Enter_Game",
		209:   "ErrorCode_Leave_Error",
		210:   "ErrorCode_Invaild_PlayerSession",
		211:   "ErrorCode_Empyt_Account",
		300:   "ErrorCode_ResourceFailed",
		400:   "ErrorCode_UseTreasureCardFailed",
		401:   "ErrorCode_CollectAdReward_ErrorOrder",
		402:   "ErrorCode_CollectAdReward_NotCompleted",
		403:   "ErrorCode_CollectAdReward_Collected",
		500:   "ErrorCode_Mission_ID_Error",
		501:   "ErrorCode_Mission_Error",
		502:   "ErrorCode_Mission_Not_Completed",
		503:   "ErrorCode_Reward_Collected",
		600:   "ErrorCode_Daily_TimeFew",
		601:   "ErrorCode_Daily_GetReWardFew",
		701:   "ErrorCode_Daily_MissionValueFew",
		800:   "ErrorCode_DiamondFew",
		900:   "ErrorCode_AlreadyGet",
		901:   "ErrorCode_PointFew",
		1000:  "ErrorCode_AlreadySign",
		1001:  "ErrorCode_TimeOverdue",
		1100:  "ErrorCode_LevelNoEnough",
		1200:  "ErrorCode_AlreadyGetReward",
		1201:  "ErrorCode_ConditionNoReach",
		1298:  "ErrorCode_InvaildAccessToken",
		1299:  "ErrorCode_PurchaseInvaildState",
		1300:  "ErrorCode_InvaildOrder",
		1301:  "ErrorCode_AlreadyConsumption",
		1302:  "ErrorCode_AlreadyHandle",
		1400:  "ErrorCode_Deal_Overdue",
		1401:  "ErrorCode_LinkGive_Invaild_Token",
		1402:  "ErrorCode_LinkGive_Overdue",
		1403:  "ErrorCode_LinkGive_Invaild_RewardsType",
		1404:  "ErrorCode_LinkGive_times_over",
		1405:  "ErrorCode_LinkGive_Rewarded",
		1406:  "ErrorCode_LinkGive_Unkonwn_Error",
		1501:  "ErrorCode_GC_Invaild_Mission",
		1502:  "ErrorCode_GC_Mission_Not_Complete",
		1503:  "ErrorCode_GC_Not_Enough_Gem",
		1504:  "ErrorCode_GC_Data_Unusual",
		1505:  "ErrorCode_GC_Invaild_Level",
		1506:  "ErrorCode_GC_Invaild_Point",
		1507:  "ErrorCode_GC_Invaild_Config",
		1508:  "ErrorCode_GC_Reward_Collected",
		1601:  "ErrorCode_WP_Invaild_Activity",
		1602:  "ErrorCode_WP_Not_UnLock",
		1603:  "ErrorCode_WP_Not_Purchase",
		1604:  "ErrorCode_WP_Have_Got_Prize",
		1605:  "ErrorCode_WP_Invaild_Prize",
		1701:  "ErrorCode_PR_Have_Got_Reward",
		1702:  "ErrorCode_PR_Data_Unusual",
		1801:  "ErrorCode_HeartBonus_Not_Exist",
		1802:  "ErrorCode_HeartBonus_Error_Type",
		1803:  "ErrorCode_HeartBonus_Not_Enough_Times",
		1804:  "ErrorCode_HeartBonus_Reward_Not_Exist",
		21000: "ErrorCode_IOS_ERROR_JSON",
		21002: "ErrorCode_IOS_ERROR_RECEIPTDATA",
		21003: "ErrorCode_IOS_NOPASS_RECEIPTDATA",
		21004: "ErrorCode_IOS_NOPASS_SHARED_SECRET",
		21005: "ErrorCode_IOS_RECEIPT_SERVER_DISABLED",
		21006: "ErrorCode_IOS_SUBSCRIBE_EXPIRE",
		21007: "ErrorCode_IOS_SANDBOX_ERRORTO_PRODUCE",
		21008: "ErrorCode_IOS_PRODUCE_ERRORTO_SANDBOX",
		21009: "ErrorCode_IOS_ORDER_HAVE_DEAL",
		21010: "ErrorCode_IOS_BUNDLE_ID_ERROR",
		1901:  "ErrorCode_BindAppleID_Null",
		1902:  "ErrorCode_AppleID_Had_Bind",
		2001:  "ErrorCode_Bingo_Invaild_Activity",
		2002:  "ErrorCode_Bingo_Not_Enough_Ball",
		2003:  "ErrorCode_Bingo_Data_Error",
		2004:  "ErrorCode_Bingo_Not_Enough_Wild_Ball",
		2101:  "ErrorCode_Dice_Invaild_Activity",
		2102:  "ErrorCode_Dice_Not_Enough_Ball",
		2103:  "ErrorCode_Dice_Data_Error",
		2104:  "ErrorCode_Dice_Level_Data_Error",
		22001: "ErrorCode_Not_Enough_Times",
		22002: "ErrorCode_Had_Enough_Gold",
		23001: "ErrorCode_Virtual_Card_Not_Exist",
		23002: "ErrorCode_Virtual_Card_Expire",
		23003: "ErrorCode_Virtual_Card_Data_Error",
		23004: "ErrorCode_Virtual_Card_Low_Vip_Level",
		23005: "ErrorCode_Virtual_Card_Bet_Mode_Error",
		23006: "ErrorCode_Virtual_Card_HighRoll_Mode_Error",
		23007: "ErrorCode_LoginBonus_GetRewards_Invalid",
		23008: "ErrorCode_DailyCard_GetRewards_Invalid",
	}
	ErrorCode_value = map[string]int32{
		"ErrorCode_Succeed":                          0,
		"ErrorCode_KickPlayer":                       1,
		"ErrorCode_JoinLobbyFailed":                  100,
		"ErrorCode_CreateGameFailed":                 101,
		"ErrorCode_JoinGameFailed":                   102,
		"ErrorCode_LoadRoleFailed":                   103,
		"ErrorCode_LoginFailed":                      200,
		"ErrorCode_Binded":                           201,
		"ErrorCode_BindCurAcount":                    202,
		"ErrorCode_ServerConfigNoExist":              203,
		"ErrorCode_HadJoinLobby":                     204,
		"ErrorCode_GameMaintenance":                  205,
		"ErrorCode_VersionError":                     206,
		"ErrorCode_Invaild_Role":                     207,
		"ErrorCode_Had_Enter_Game":                   208,
		"ErrorCode_Leave_Error":                      209,
		"ErrorCode_Invaild_PlayerSession":            210,
		"ErrorCode_Empyt_Account":                    211,
		"ErrorCode_ResourceFailed":                   300,
		"ErrorCode_UseTreasureCardFailed":            400,
		"ErrorCode_CollectAdReward_ErrorOrder":       401,
		"ErrorCode_CollectAdReward_NotCompleted":     402,
		"ErrorCode_CollectAdReward_Collected":        403,
		"ErrorCode_Mission_ID_Error":                 500,
		"ErrorCode_Mission_Error":                    501,
		"ErrorCode_Mission_Not_Completed":            502,
		"ErrorCode_Reward_Collected":                 503,
		"ErrorCode_Daily_TimeFew":                    600,
		"ErrorCode_Daily_GetReWardFew":               601,
		"ErrorCode_Daily_MissionValueFew":            701,
		"ErrorCode_DiamondFew":                       800,
		"ErrorCode_AlreadyGet":                       900,
		"ErrorCode_PointFew":                         901,
		"ErrorCode_AlreadySign":                      1000,
		"ErrorCode_TimeOverdue":                      1001,
		"ErrorCode_LevelNoEnough":                    1100,
		"ErrorCode_AlreadyGetReward":                 1200,
		"ErrorCode_ConditionNoReach":                 1201,
		"ErrorCode_InvaildAccessToken":               1298,
		"ErrorCode_PurchaseInvaildState":             1299,
		"ErrorCode_InvaildOrder":                     1300,
		"ErrorCode_AlreadyConsumption":               1301,
		"ErrorCode_AlreadyHandle":                    1302,
		"ErrorCode_Deal_Overdue":                     1400,
		"ErrorCode_LinkGive_Invaild_Token":           1401,
		"ErrorCode_LinkGive_Overdue":                 1402,
		"ErrorCode_LinkGive_Invaild_RewardsType":     1403,
		"ErrorCode_LinkGive_times_over":              1404,
		"ErrorCode_LinkGive_Rewarded":                1405,
		"ErrorCode_LinkGive_Unkonwn_Error":           1406,
		"ErrorCode_GC_Invaild_Mission":               1501,
		"ErrorCode_GC_Mission_Not_Complete":          1502,
		"ErrorCode_GC_Not_Enough_Gem":                1503,
		"ErrorCode_GC_Data_Unusual":                  1504,
		"ErrorCode_GC_Invaild_Level":                 1505,
		"ErrorCode_GC_Invaild_Point":                 1506,
		"ErrorCode_GC_Invaild_Config":                1507,
		"ErrorCode_GC_Reward_Collected":              1508,
		"ErrorCode_WP_Invaild_Activity":              1601,
		"ErrorCode_WP_Not_UnLock":                    1602,
		"ErrorCode_WP_Not_Purchase":                  1603,
		"ErrorCode_WP_Have_Got_Prize":                1604,
		"ErrorCode_WP_Invaild_Prize":                 1605,
		"ErrorCode_PR_Have_Got_Reward":               1701,
		"ErrorCode_PR_Data_Unusual":                  1702,
		"ErrorCode_HeartBonus_Not_Exist":             1801,
		"ErrorCode_HeartBonus_Error_Type":            1802,
		"ErrorCode_HeartBonus_Not_Enough_Times":      1803,
		"ErrorCode_HeartBonus_Reward_Not_Exist":      1804,
		"ErrorCode_IOS_ERROR_JSON":                   21000,
		"ErrorCode_IOS_ERROR_RECEIPTDATA":            21002,
		"ErrorCode_IOS_NOPASS_RECEIPTDATA":           21003,
		"ErrorCode_IOS_NOPASS_SHARED_SECRET":         21004,
		"ErrorCode_IOS_RECEIPT_SERVER_DISABLED":      21005,
		"ErrorCode_IOS_SUBSCRIBE_EXPIRE":             21006,
		"ErrorCode_IOS_SANDBOX_ERRORTO_PRODUCE":      21007,
		"ErrorCode_IOS_PRODUCE_ERRORTO_SANDBOX":      21008,
		"ErrorCode_IOS_ORDER_HAVE_DEAL":              21009,
		"ErrorCode_IOS_BUNDLE_ID_ERROR":              21010,
		"ErrorCode_BindAppleID_Null":                 1901,
		"ErrorCode_AppleID_Had_Bind":                 1902,
		"ErrorCode_Bingo_Invaild_Activity":           2001,
		"ErrorCode_Bingo_Not_Enough_Ball":            2002,
		"ErrorCode_Bingo_Data_Error":                 2003,
		"ErrorCode_Bingo_Not_Enough_Wild_Ball":       2004,
		"ErrorCode_Dice_Invaild_Activity":            2101,
		"ErrorCode_Dice_Not_Enough_Ball":             2102,
		"ErrorCode_Dice_Data_Error":                  2103,
		"ErrorCode_Dice_Level_Data_Error":            2104,
		"ErrorCode_Not_Enough_Times":                 22001,
		"ErrorCode_Had_Enough_Gold":                  22002,
		"ErrorCode_Virtual_Card_Not_Exist":           23001,
		"ErrorCode_Virtual_Card_Expire":              23002,
		"ErrorCode_Virtual_Card_Data_Error":          23003,
		"ErrorCode_Virtual_Card_Low_Vip_Level":       23004,
		"ErrorCode_Virtual_Card_Bet_Mode_Error":      23005,
		"ErrorCode_Virtual_Card_HighRoll_Mode_Error": 23006,
		"ErrorCode_LoginBonus_GetRewards_Invalid":    23007,
		"ErrorCode_DailyCard_GetRewards_Invalid":     23008,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

type SDKPlatform int32

const (
	SDKPlatform_Platform_Android SDKPlatform = 0
	SDKPlatform_Platform_Ios     SDKPlatform = 1
	SDKPlatform_Platform_Pc      SDKPlatform = 2
	SDKPlatform_Platform_Other   SDKPlatform = 3
)

// Enum value maps for SDKPlatform.
var (
	SDKPlatform_name = map[int32]string{
		0: "Platform_Android",
		1: "Platform_Ios",
		2: "Platform_Pc",
		3: "Platform_Other",
	}
	SDKPlatform_value = map[string]int32{
		"Platform_Android": 0,
		"Platform_Ios":     1,
		"Platform_Pc":      2,
		"Platform_Other":   3,
	}
)

func (x SDKPlatform) Enum() *SDKPlatform {
	p := new(SDKPlatform)
	*p = x
	return p
}

func (x SDKPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SDKPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[1].Descriptor()
}

func (SDKPlatform) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[1]
}

func (x SDKPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SDKPlatform.Descriptor instead.
func (SDKPlatform) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

//大厅角色初始数据类型
type LobbyRoleInitAttr int32

const (
	LobbyRoleInitAttr_LRIA_Role                LobbyRoleInitAttr = 0 //角色信息
	LobbyRoleInitAttr_LRIA_Activities          LobbyRoleInitAttr = 1 //活动们
	LobbyRoleInitAttr_LRIA_Mails               LobbyRoleInitAttr = 2 //邮件们
	LobbyRoleInitAttr_LRIA_RoleDailyData       LobbyRoleInitAttr = 3 //每日
	LobbyRoleInitAttr_LRIA_Mission             LobbyRoleInitAttr = 4 //任务
	LobbyRoleInitAttr_LRIA_Store               LobbyRoleInitAttr = 5 //玩家商城数据
	LobbyRoleInitAttr_LRIA_Pig                 LobbyRoleInitAttr = 6 //pig
	LobbyRoleInitAttr_LRIA_VIPLounge           LobbyRoleInitAttr = 7 // vip lounge
	LobbyRoleInitAttr_LRIA_PlayerGuide         LobbyRoleInitAttr = 8
	LobbyRoleInitAttr_LRIA_Deal                LobbyRoleInitAttr = 9
	LobbyRoleInitAttr_LRIA_LoginRewards        LobbyRoleInitAttr = 10 //7天登录
	LobbyRoleInitAttr_LRIA_LevelChallege       LobbyRoleInitAttr = 11
	LobbyRoleInitAttr_LRIA_ExternMission       LobbyRoleInitAttr = 12
	LobbyRoleInitAttr_LRIA_CashBackData        LobbyRoleInitAttr = 13 //cashback
	LobbyRoleInitAttr_LRIA_GetServerSystemTime LobbyRoleInitAttr = 14 //ServerSystemTime
	LobbyRoleInitAttr_LRIA_RoleRateData        LobbyRoleInitAttr = 15 //RateData
	LobbyRoleInitAttr_LRIA_GloryChallenge      LobbyRoleInitAttr = 16 //GloryChallenge
	LobbyRoleInitAttr_LRIA_WinnerPass          LobbyRoleInitAttr = 17 //WinnerPass
	LobbyRoleInitAttr_LRIA_StarCollectMission  LobbyRoleInitAttr = 18 //StarCollectMission
	LobbyRoleInitAttr_LRIA_BingoMiniGame       LobbyRoleInitAttr = 19 //BingoMiniGame
	LobbyRoleInitAttr_LRIA_DiceMiniGame        LobbyRoleInitAttr = 21 //DiceMiniGame
	LobbyRoleInitAttr_LRIA_VirtualCard         LobbyRoleInitAttr = 22 //虚宝卡
	LobbyRoleInitAttr_LRIA_DailyCard           LobbyRoleInitAttr = 23 //DailyCard
)

// Enum value maps for LobbyRoleInitAttr.
var (
	LobbyRoleInitAttr_name = map[int32]string{
		0:  "LRIA_Role",
		1:  "LRIA_Activities",
		2:  "LRIA_Mails",
		3:  "LRIA_RoleDailyData",
		4:  "LRIA_Mission",
		5:  "LRIA_Store",
		6:  "LRIA_Pig",
		7:  "LRIA_VIPLounge",
		8:  "LRIA_PlayerGuide",
		9:  "LRIA_Deal",
		10: "LRIA_LoginRewards",
		11: "LRIA_LevelChallege",
		12: "LRIA_ExternMission",
		13: "LRIA_CashBackData",
		14: "LRIA_GetServerSystemTime",
		15: "LRIA_RoleRateData",
		16: "LRIA_GloryChallenge",
		17: "LRIA_WinnerPass",
		18: "LRIA_StarCollectMission",
		19: "LRIA_BingoMiniGame",
		21: "LRIA_DiceMiniGame",
		22: "LRIA_VirtualCard",
		23: "LRIA_DailyCard",
	}
	LobbyRoleInitAttr_value = map[string]int32{
		"LRIA_Role":                0,
		"LRIA_Activities":          1,
		"LRIA_Mails":               2,
		"LRIA_RoleDailyData":       3,
		"LRIA_Mission":             4,
		"LRIA_Store":               5,
		"LRIA_Pig":                 6,
		"LRIA_VIPLounge":           7,
		"LRIA_PlayerGuide":         8,
		"LRIA_Deal":                9,
		"LRIA_LoginRewards":        10,
		"LRIA_LevelChallege":       11,
		"LRIA_ExternMission":       12,
		"LRIA_CashBackData":        13,
		"LRIA_GetServerSystemTime": 14,
		"LRIA_RoleRateData":        15,
		"LRIA_GloryChallenge":      16,
		"LRIA_WinnerPass":          17,
		"LRIA_StarCollectMission":  18,
		"LRIA_BingoMiniGame":       19,
		"LRIA_DiceMiniGame":        21,
		"LRIA_VirtualCard":         22,
		"LRIA_DailyCard":           23,
	}
)

func (x LobbyRoleInitAttr) Enum() *LobbyRoleInitAttr {
	p := new(LobbyRoleInitAttr)
	*p = x
	return p
}

func (x LobbyRoleInitAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LobbyRoleInitAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[2].Descriptor()
}

func (LobbyRoleInitAttr) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[2]
}

func (x LobbyRoleInitAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LobbyRoleInitAttr.Descriptor instead.
func (LobbyRoleInitAttr) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2}
}

//游戏角色初始数据类型
type GameRoleInitAttr int32

const (
	GameRoleInitAttr_GRIA_Role GameRoleInitAttr = 0 //角色信息
)

// Enum value maps for GameRoleInitAttr.
var (
	GameRoleInitAttr_name = map[int32]string{
		0: "GRIA_Role",
	}
	GameRoleInitAttr_value = map[string]int32{
		"GRIA_Role": 0,
	}
)

func (x GameRoleInitAttr) Enum() *GameRoleInitAttr {
	p := new(GameRoleInitAttr)
	*p = x
	return p
}

func (x GameRoleInitAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameRoleInitAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[3].Descriptor()
}

func (GameRoleInitAttr) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[3]
}

func (x GameRoleInitAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameRoleInitAttr.Descriptor instead.
func (GameRoleInitAttr) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3}
}

type GameOpt int32

const (
	GameOpt_GO_Null             GameOpt = 0
	GameOpt_GO_Push             GameOpt = 1 //拉
	GameOpt_GO_ChooseFreeTimes  GameOpt = 2 //选免费次数。（宙斯）发送freetimes 配置id
	GameOpt_GO_ChooseBonus      GameOpt = 3 //选择bonus。 （宙斯）发送下标 0 - 2
	GameOpt_GO_ChooseBonusTimes GameOpt = 4
	GameOpt_GO_TreasureCard     GameOpt = 5 //低保卡
	GameOpt_GO_GM_Debug_Push    GameOpt = 6 //GM拉
	GameOpt_GO_Coon_Push        GameOpt = 7 //浣熊啦
	GameOpt_GO_Coon_GM_Push     GameOpt = 8 //浣熊GM啦
)

// Enum value maps for GameOpt.
var (
	GameOpt_name = map[int32]string{
		0: "GO_Null",
		1: "GO_Push",
		2: "GO_ChooseFreeTimes",
		3: "GO_ChooseBonus",
		4: "GO_ChooseBonusTimes",
		5: "GO_TreasureCard",
		6: "GO_GM_Debug_Push",
		7: "GO_Coon_Push",
		8: "GO_Coon_GM_Push",
	}
	GameOpt_value = map[string]int32{
		"GO_Null":             0,
		"GO_Push":             1,
		"GO_ChooseFreeTimes":  2,
		"GO_ChooseBonus":      3,
		"GO_ChooseBonusTimes": 4,
		"GO_TreasureCard":     5,
		"GO_GM_Debug_Push":    6,
		"GO_Coon_Push":        7,
		"GO_Coon_GM_Push":     8,
	}
)

func (x GameOpt) Enum() *GameOpt {
	p := new(GameOpt)
	*p = x
	return p
}

func (x GameOpt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameOpt) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[4].Descriptor()
}

func (GameOpt) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[4]
}

func (x GameOpt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameOpt.Descriptor instead.
func (GameOpt) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{4}
}

type VipAddition int32

const (
	VipAddition_ADDI_Null              VipAddition = 0
	VipAddition_ADDI_Charge_Coin       VipAddition = 4
	VipAddition_ADDI_UpVipLevel_Point  VipAddition = 5
	VipAddition_ADDI_Lottery_Coin      VipAddition = 6
	VipAddition_ADDI_Wheel_Coin        VipAddition = 7
	VipAddition_ADDI_StoreFree_Coin    VipAddition = 8
	VipAddition_ADDI_Mail_Coin         VipAddition = 9
	VipAddition_ADDI_Friend_Coin       VipAddition = 10
	VipAddition_ADDI_Mystery_Gift      VipAddition = 11
	VipAddition_ADDI_FB_Coin           VipAddition = 12
	VipAddition_ADDI_FanPage_Gift      VipAddition = 13
	VipAddition_ADDI_Cards_Coin        VipAddition = 14
	VipAddition_ADDI_Cards_MaxNum      VipAddition = 15
	VipAddition_ADDI_LotteryUltra_Coin VipAddition = 16
)

// Enum value maps for VipAddition.
var (
	VipAddition_name = map[int32]string{
		0:  "ADDI_Null",
		4:  "ADDI_Charge_Coin",
		5:  "ADDI_UpVipLevel_Point",
		6:  "ADDI_Lottery_Coin",
		7:  "ADDI_Wheel_Coin",
		8:  "ADDI_StoreFree_Coin",
		9:  "ADDI_Mail_Coin",
		10: "ADDI_Friend_Coin",
		11: "ADDI_Mystery_Gift",
		12: "ADDI_FB_Coin",
		13: "ADDI_FanPage_Gift",
		14: "ADDI_Cards_Coin",
		15: "ADDI_Cards_MaxNum",
		16: "ADDI_LotteryUltra_Coin",
	}
	VipAddition_value = map[string]int32{
		"ADDI_Null":              0,
		"ADDI_Charge_Coin":       4,
		"ADDI_UpVipLevel_Point":  5,
		"ADDI_Lottery_Coin":      6,
		"ADDI_Wheel_Coin":        7,
		"ADDI_StoreFree_Coin":    8,
		"ADDI_Mail_Coin":         9,
		"ADDI_Friend_Coin":       10,
		"ADDI_Mystery_Gift":      11,
		"ADDI_FB_Coin":           12,
		"ADDI_FanPage_Gift":      13,
		"ADDI_Cards_Coin":        14,
		"ADDI_Cards_MaxNum":      15,
		"ADDI_LotteryUltra_Coin": 16,
	}
)

func (x VipAddition) Enum() *VipAddition {
	p := new(VipAddition)
	*p = x
	return p
}

func (x VipAddition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VipAddition) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[5].Descriptor()
}

func (VipAddition) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[5]
}

func (x VipAddition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VipAddition.Descriptor instead.
func (VipAddition) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{5}
}

type GameType int32

const (
	GameType_GameType_Normal             GameType = 0
	GameType_GameType_VipLoungeLimit     GameType = 1
	GameType_GameType_VipLoungeExclusave GameType = 2
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "GameType_Normal",
		1: "GameType_VipLoungeLimit",
		2: "GameType_VipLoungeExclusave",
	}
	GameType_value = map[string]int32{
		"GameType_Normal":             0,
		"GameType_VipLoungeLimit":     1,
		"GameType_VipLoungeExclusave": 2,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[6].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[6]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{6}
}

type GameItemTag int32

const (
	GameItemTag_GameItemTag_None       GameItemTag = 0
	GameItemTag_GameItemTag_New        GameItemTag = 1
	GameItemTag_GameItemTag_Hot        GameItemTag = 2
	GameItemTag_GameItemTag_ComingSoon GameItemTag = 3
)

// Enum value maps for GameItemTag.
var (
	GameItemTag_name = map[int32]string{
		0: "GameItemTag_None",
		1: "GameItemTag_New",
		2: "GameItemTag_Hot",
		3: "GameItemTag_ComingSoon",
	}
	GameItemTag_value = map[string]int32{
		"GameItemTag_None":       0,
		"GameItemTag_New":        1,
		"GameItemTag_Hot":        2,
		"GameItemTag_ComingSoon": 3,
	}
)

func (x GameItemTag) Enum() *GameItemTag {
	p := new(GameItemTag)
	*p = x
	return p
}

func (x GameItemTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameItemTag) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[7].Descriptor()
}

func (GameItemTag) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[7]
}

func (x GameItemTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameItemTag.Descriptor instead.
func (GameItemTag) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{7}
}

type Coom_Award_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items_ID       uint32 `protobuf:"varint,1,opt,name=Items_ID,json=ItemsID,proto3" json:"Items_ID,omitempty"`
	Items_Amount   uint64 `protobuf:"varint,2,opt,name=Items_Amount,json=ItemsAmount,proto3" json:"Items_Amount,omitempty"`
	Items_Multiply uint32 `protobuf:"varint,3,opt,name=Items_Multiply,json=ItemsMultiply,proto3" json:"Items_Multiply,omitempty"`
	Type           uint32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`                         // 服务器存储奖励使用
	Object_ID      uint32 `protobuf:"varint,5,opt,name=Object_ID,json=ObjectID,proto3" json:"Object_ID,omitempty"` // 服务器存储奖励使用
}

func (x *Coom_Award_Item) Reset() {
	*x = Coom_Award_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coom_Award_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coom_Award_Item) ProtoMessage() {}

func (x *Coom_Award_Item) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coom_Award_Item.ProtoReflect.Descriptor instead.
func (*Coom_Award_Item) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

func (x *Coom_Award_Item) GetItems_ID() uint32 {
	if x != nil {
		return x.Items_ID
	}
	return 0
}

func (x *Coom_Award_Item) GetItems_Amount() uint64 {
	if x != nil {
		return x.Items_Amount
	}
	return 0
}

func (x *Coom_Award_Item) GetItems_Multiply() uint32 {
	if x != nil {
		return x.Items_Multiply
	}
	return 0
}

func (x *Coom_Award_Item) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Coom_Award_Item) GetObject_ID() uint32 {
	if x != nil {
		return x.Object_ID
	}
	return 0
}

type MRewardsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items_ID_      uint32 `protobuf:"varint,1,opt,name=Items_ID_,json=ItemsID,proto3" json:"Items_ID_,omitempty"`
	Item_Amount_   int64  `protobuf:"varint,2,opt,name=Item_Amount_,json=ItemAmount,proto3" json:"Item_Amount_,omitempty"`
	Item_Multiply_ uint32 `protobuf:"varint,3,opt,name=Item_Multiply_,json=ItemMultiply,proto3" json:"Item_Multiply_,omitempty"`
}

func (x *MRewardsItem) Reset() {
	*x = MRewardsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRewardsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRewardsItem) ProtoMessage() {}

func (x *MRewardsItem) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRewardsItem.ProtoReflect.Descriptor instead.
func (*MRewardsItem) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

func (x *MRewardsItem) GetItems_ID_() uint32 {
	if x != nil {
		return x.Items_ID_
	}
	return 0
}

func (x *MRewardsItem) GetItem_Amount_() int64 {
	if x != nil {
		return x.Item_Amount_
	}
	return 0
}

func (x *MRewardsItem) GetItem_Multiply_() uint32 {
	if x != nil {
		return x.Item_Multiply_
	}
	return 0
}

var File_Common_proto protoreflect.FileDescriptor

var file_Common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x49, 0x44, 0x12, 0x21, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x0c, 0x4d, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x49, 0x44, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x2a, 0x9f, 0x1b, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4b,
	0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x66, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x10, 0x67, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0xc8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x42, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x10, 0xc9, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x69, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x41, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0xca, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x6f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xcb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61, 0x64, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x10, 0xcc, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0xcd, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xce, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x10,
	0xcf, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x48, 0x61, 0x64, 0x5f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x10, 0xd0,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd1, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69,
	0x6c, 0x64, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0xd2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x45, 0x6d, 0x70, 0x79, 0x74, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xd3,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0xac, 0x02,
	0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x73,
	0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x90, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x91,
	0x03, 0x12, 0x2b, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x92, 0x03, 0x12, 0x28,
	0x0a, 0x23, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x93, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf4, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xf5, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0xf6, 0x03, 0x12, 0x1f, 0x0a,
	0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0xf7, 0x03, 0x12, 0x1c,
	0x0a, 0x17, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x65, 0x77, 0x10, 0xd8, 0x04, 0x12, 0x21, 0x0a, 0x1c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x57, 0x61, 0x72, 0x64, 0x46, 0x65, 0x77, 0x10, 0xd9, 0x04, 0x12,
	0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x65, 0x77, 0x10, 0xbd, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x46, 0x65, 0x77, 0x10, 0xa0, 0x06,
	0x12, 0x19, 0x0a, 0x14, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x47, 0x65, 0x74, 0x10, 0x84, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x65,
	0x77, 0x10, 0x85, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x10, 0xe8, 0x07,
	0x12, 0x1a, 0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x10, 0xe9, 0x07, 0x12, 0x1c, 0x0a, 0x17,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e,
	0x6f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0xcc, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xb0, 0x09, 0x12, 0x1f, 0x0a, 0x1a, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x63, 0x68, 0x10, 0xb1, 0x09, 0x12, 0x21, 0x0a, 0x1c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c,
	0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x92, 0x0a, 0x12,
	0x23, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x93, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x94,
	0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x95, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x10,
	0x96, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x44, 0x65, 0x61, 0x6c, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x10, 0xf8, 0x0a, 0x12,
	0x25, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x10, 0xf9, 0x0a, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x64, 0x75, 0x65, 0x10, 0xfa, 0x0a, 0x12, 0x2b, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xfb, 0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x10, 0xfc, 0x0a, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x69, 0x76, 0x65, 0x5f, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0xfd, 0x0a, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x69, 0x76, 0x65,
	0x5f, 0x55, 0x6e, 0x6b, 0x6f, 0x6e, 0x77, 0x6e, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xfe,
	0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47,
	0x43, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0xdd, 0x0b, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x47, 0x43, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74,
	0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0xde, 0x0b, 0x12, 0x20, 0x0a, 0x1b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x43, 0x5f, 0x4e, 0x6f, 0x74,
	0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x47, 0x65, 0x6d, 0x10, 0xdf, 0x0b, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x43, 0x5f, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x55, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x10, 0xe0, 0x0b, 0x12, 0x1f,
	0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x43, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0xe1, 0x0b, 0x12,
	0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x43, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0xe2, 0x0b,
	0x12, 0x20, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x43,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10,
	0xe3, 0x0b, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x47, 0x43, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0xe4, 0x0b, 0x12, 0x22, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x57, 0x50, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xc1, 0x0c, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x50, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x55,
	0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0xc2, 0x0c, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x50, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x10, 0xc3, 0x0c, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x50, 0x5f, 0x48, 0x61, 0x76, 0x65, 0x5f, 0x47, 0x6f,
	0x74, 0x5f, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x10, 0xc4, 0x0c, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x50, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69,
	0x6c, 0x64, 0x5f, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x10, 0xc5, 0x0c, 0x12, 0x21, 0x0a, 0x1c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x5f, 0x48, 0x61, 0x76, 0x65,
	0x5f, 0x47, 0x6f, 0x74, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0xa5, 0x0d, 0x12, 0x1e,
	0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x5f, 0x44,
	0x61, 0x74, 0x61, 0x5f, 0x55, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x10, 0xa6, 0x0d, 0x12, 0x23,
	0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x10, 0x89, 0x0e, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8a, 0x0e, 0x12, 0x2a, 0x0a, 0x25, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x10, 0x8b, 0x0e, 0x12, 0x2a, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x8c,
	0x0e, 0x12, 0x1e, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x4f, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x88, 0xa4,
	0x01, 0x12, 0x25, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49,
	0x4f, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x8a, 0xa4, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x4e, 0x4f, 0x50, 0x41, 0x53, 0x53,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x44, 0x41, 0x54, 0x41, 0x10, 0x8b, 0xa4, 0x01,
	0x12, 0x28, 0x0a, 0x22, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f,
	0x53, 0x5f, 0x4e, 0x4f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x8c, 0xa4, 0x01, 0x12, 0x2b, 0x0a, 0x25, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x50, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x8d, 0xa4, 0x01, 0x12, 0x24, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x8e, 0xa4, 0x01, 0x12, 0x2b, 0x0a,
	0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x53,
	0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x54, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x10, 0x8f, 0xa4, 0x01, 0x12, 0x2b, 0x0a, 0x25, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x54, 0x4f, 0x5f, 0x53, 0x41, 0x4e, 0x44,
	0x42, 0x4f, 0x58, 0x10, 0x90, 0xa4, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x48,
	0x41, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x91, 0xa4, 0x01, 0x12, 0x23, 0x0a, 0x1d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x42, 0x55,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x92, 0xa4,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42,
	0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10,
	0xed, 0x0e, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x49, 0x44, 0x5f, 0x48, 0x61, 0x64, 0x5f, 0x42, 0x69, 0x6e, 0x64,
	0x10, 0xee, 0x0e, 0x12, 0x25, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x42, 0x69, 0x6e, 0x67, 0x6f, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0xd1, 0x0f, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x69, 0x6e, 0x67, 0x6f, 0x5f, 0x4e, 0x6f,
	0x74, 0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0xd2, 0x0f,
	0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x69,
	0x6e, 0x67, 0x6f, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xd3,
	0x0f, 0x12, 0x29, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42,
	0x69, 0x6e, 0x67, 0x6f, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x57, 0x69, 0x6c, 0x64, 0x5f, 0x42, 0x61, 0x6c, 0x6c, 0x10, 0xd4, 0x0f, 0x12, 0x24, 0x0a, 0x1f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x69, 0x6c, 0x64, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10,
	0xb5, 0x10, 0x12, 0x23, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x44, 0x69, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x42, 0x61, 0x6c, 0x6c, 0x10, 0xb6, 0x10, 0x12, 0x1e, 0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0xb7, 0x10, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xb8, 0x10, 0x12, 0x20, 0x0a,
	0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0xf1, 0xab, 0x01, 0x12,
	0x1f, 0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61, 0x64,
	0x5f, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0xf2, 0xab, 0x01,
	0x12, 0x26, 0x0a, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x5f, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0xd9, 0xb3, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x43, 0x61,
	0x72, 0x64, 0x5f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0xda, 0xb3, 0x01, 0x12, 0x27, 0x0a,
	0x21, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0xdb, 0xb3, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64,
	0x5f, 0x4c, 0x6f, 0x77, 0x5f, 0x56, 0x69, 0x70, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0xdc,
	0xb3, 0x01, 0x12, 0x2b, 0x0a, 0x25, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x42, 0x65, 0x74,
	0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xdd, 0xb3, 0x01, 0x12,
	0x30, 0x0a, 0x2a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x52, 0x6f,
	0x6c, 0x6c, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xde, 0xb3,
	0x01, 0x12, 0x2d, 0x0a, 0x27, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xdf, 0xb3, 0x01,
	0x12, 0x2c, 0x0a, 0x26, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xe0, 0xb3, 0x01, 0x2a, 0x5a,
	0x0a, 0x0b, 0x53, 0x44, 0x4b, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x49, 0x6f, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x50, 0x63, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x03, 0x2a, 0xff, 0x03, 0x0a, 0x11, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x4d, 0x61, 0x69,
	0x6c, 0x73, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x52, 0x6f, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x4c, 0x52, 0x49, 0x41, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x50, 0x69, 0x67, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x52, 0x49, 0x41, 0x5f, 0x56, 0x49, 0x50, 0x4c, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x44,
	0x65, 0x61, 0x6c, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x52, 0x49, 0x41, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x67, 0x65, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x52, 0x49, 0x41, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x0e, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x52, 0x49, 0x41,
	0x5f, 0x47, 0x6c, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10,
	0x10, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x42, 0x69, 0x6e, 0x67,
	0x6f, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x52, 0x49, 0x41, 0x5f, 0x44, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65,
	0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x52, 0x49, 0x41, 0x5f, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x52, 0x49, 0x41,
	0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x61, 0x72, 0x64, 0x10, 0x17, 0x2a, 0x21, 0x0a, 0x10,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x49, 0x41, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x00, 0x2a,
	0xba, 0x01, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x4f, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4f, 0x5f, 0x50,
	0x75, 0x73, 0x68, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x4f, 0x5f, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x4f, 0x5f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x4f, 0x5f, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x42, 0x6f,
	0x6e, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x4f,
	0x5f, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x4f, 0x5f, 0x47, 0x4d, 0x5f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x50,
	0x75, 0x73, 0x68, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x4f, 0x5f, 0x43, 0x6f, 0x6f, 0x6e,
	0x5f, 0x50, 0x75, 0x73, 0x68, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x4f, 0x5f, 0x43, 0x6f,
	0x6f, 0x6e, 0x5f, 0x47, 0x4d, 0x5f, 0x50, 0x75, 0x73, 0x68, 0x10, 0x08, 0x2a, 0xc4, 0x02, 0x0a,
	0x0b, 0x56, 0x69, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x44, 0x44, 0x49, 0x5f, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x44, 0x44, 0x49, 0x5f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x55, 0x70, 0x56, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x44, 0x44, 0x49, 0x5f, 0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x49,
	0x5f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x65, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x4d, 0x61, 0x69, 0x6c, 0x5f, 0x43,
	0x6f, 0x69, 0x6e, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x44, 0x44, 0x49, 0x5f, 0x4d, 0x79, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x47, 0x69, 0x66, 0x74,
	0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x46, 0x42, 0x5f, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x46, 0x61, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x44, 0x44, 0x49, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10, 0x0e,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x49, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x4d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x49, 0x5f,
	0x4c, 0x6f, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x6c, 0x74, 0x72, 0x61, 0x5f, 0x43, 0x6f, 0x69,
	0x6e, 0x10, 0x10, 0x2a, 0x5d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x56, 0x69, 0x70, 0x4c, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x69,
	0x70, 0x4c, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x61, 0x76, 0x65,
	0x10, 0x02, 0x2a, 0x69, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x5f, 0x4e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67, 0x5f, 0x48, 0x6f, 0x74, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x67,
	0x5f, 0x43, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x03, 0x42, 0x0b, 0x5a,
	0x09, 0x2e, 0x2f, 0x4d, 0x73, 0x67, 0x3b, 0x4d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_Common_proto_rawDescOnce sync.Once
	file_Common_proto_rawDescData = file_Common_proto_rawDesc
)

func file_Common_proto_rawDescGZIP() []byte {
	file_Common_proto_rawDescOnce.Do(func() {
		file_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_proto_rawDescData)
	})
	return file_Common_proto_rawDescData
}

var file_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_Common_proto_goTypes = []interface{}{
	(ErrorCode)(0),          // 0: ErrorCode
	(SDKPlatform)(0),        // 1: SDKPlatform
	(LobbyRoleInitAttr)(0),  // 2: LobbyRoleInitAttr
	(GameRoleInitAttr)(0),   // 3: GameRoleInitAttr
	(GameOpt)(0),            // 4: GameOpt
	(VipAddition)(0),        // 5: VipAddition
	(GameType)(0),           // 6: GameType
	(GameItemTag)(0),        // 7: GameItemTag
	(*Coom_Award_Item)(nil), // 8: Coom_Award_Item
	(*MRewardsItem)(nil),    // 9: MRewardsItem
}
var file_Common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Common_proto_init() }
func file_Common_proto_init() {
	if File_Common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coom_Award_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRewardsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_proto_goTypes,
		DependencyIndexes: file_Common_proto_depIdxs,
		EnumInfos:         file_Common_proto_enumTypes,
		MessageInfos:      file_Common_proto_msgTypes,
	}.Build()
	File_Common_proto = out.File
	file_Common_proto_rawDesc = nil
	file_Common_proto_goTypes = nil
	file_Common_proto_depIdxs = nil
}
